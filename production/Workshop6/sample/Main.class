//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package sample;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Main extends Application {
    static final File FILE = new File("address.txt");
    static final int charsPerLine = 40;
    static String[] records = new String[5];
    Scanner input;

    public Main() {
        this.input = new Scanner(System.in);
    }

    public void start(Stage primaryStage) throws Exception {
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(20.0D, 20.0D, 20.0D, 20.0D));
        grid.setVgap(8.0D);
        grid.setHgap(10.0D);
        Label first = new Label("First Name:");
        GridPane.setConstraints(first, 0, 0);
        Label last = new Label("Last Name:");
        GridPane.setConstraints(last, 0, 1);
        Label city = new Label("City:");
        GridPane.setConstraints(city, 0, 2);
        Label prov = new Label("Province:");
        GridPane.setConstraints(prov, 2, 2);
        Label postal = new Label("Postal Code:");
        GridPane.setConstraints(postal, 4, 2);
        TextField fn = new TextField();
        GridPane.setConstraints(fn, 1, 0);
        fn.setPrefWidth(600.0D);
        TextField ln = new TextField();
        GridPane.setConstraints(ln, 1, 1);
        ln.setPrefWidth(600.0D);
        TextField ct = new TextField();
        GridPane.setConstraints(ct, 1, 2);
        ChoiceBox<String> prv = new ChoiceBox();
        GridPane.setConstraints(prv, 3, 2);
        TextField pc = new TextField();
        GridPane.setConstraints(pc, 5, 2);
        prv.getItems().addAll(new String[]{"Ontario", "Quebec", "Nova Scotia", "New Brunswick", "Manitoba", "British Columbia", "Prince Edward Island", "Saskatchewan", "Alberta", "NewFoundLand", "Nunavut", "Yukon", "Northwest"});
        Button addBtn = new Button("Add");
        addBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(addBtn, 0, 3);
        addBtn.setOnAction((e) -> {
            System.out.println("ADD button is pressed");
            String province = this.getChoice(prv);
            addAddress(fn.getText(), ln.getText(), ct.getText(), province, pc.getText());
        });
        Button firstBtn = new Button("First");
        firstBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(firstBtn, 1, 3);
        firstBtn.setOnAction((e) -> {
            System.out.println("FIRST button is pressed");
            String[] record = this.readFirstRecord();
            fn.setText(record[0]);
            ln.setText(record[1]);
            ct.setText(record[2]);
            prv.setValue(record[3]);
            pc.setText(record[4]);
        });
        Button nxtBtn = new Button("Next");
        nxtBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(nxtBtn, 2, 3);
        nxtBtn.setOnAction((e) -> {
            System.out.println("NEXT button is pressed");
            String[] record = this.readNextLine();
            fn.setText(record[0]);
            ln.setText(record[1]);
            ct.setText(record[2]);
            prv.setValue(record[3]);
            pc.setText(record[4]);
        });
        Button prevBtn = new Button("Previous");
        prevBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(prevBtn, 3, 3);
        prevBtn.setOnAction((e) -> {
            System.out.println("PREVIOUS button is pressed");
            String[] record = this.readPreviousRecord();
            fn.setText(record[0]);
            ln.setText(record[1]);
            ct.setText(record[2]);
            prv.setValue(record[3]);
            pc.setText(record[4]);
        });
        Button lastBtn = new Button("Last");
        lastBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(lastBtn, 4, 3);
        lastBtn.setOnAction((e) -> {
            System.out.println("LAST button is pressed");
            String[] record = this.readLastRecord();
            fn.setText(record[0]);
            ln.setText(record[1]);
            ct.setText(record[2]);
            prv.setValue(record[3]);
            pc.setText(record[4]);
        });
        Button updBtn = new Button("Update");
        updBtn.setMaxWidth(1.7976931348623157E308D);
        GridPane.setConstraints(updBtn, 5, 3);
        updBtn.setOnAction((e) -> {
            System.out.println("UPDATE button is pressed");
        });
        HBox rows = new HBox(10.0D);
        rows.getChildren().addAll(new Node[]{city, ct, prov, prv, postal, pc});
        HBox buttons = new HBox(10.0D);
        buttons.getChildren().addAll(new Node[]{addBtn, firstBtn, nxtBtn, prevBtn, lastBtn, updBtn});
        grid.add(buttons, 1, 6, 7, 8);
        grid.add(rows, 0, 2, 5, 6);
        grid.getChildren().addAll(new Node[]{first, fn, last, ln});
        Scene scene = new Scene(grid, 400.0D, 350.0D);
        primaryStage.setTitle("Address Book");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private static byte[] readFromFile(File filepath, int pos, int size) throws IOException {
        RandomAccessFile fileAF = new RandomAccessFile(filepath, "r");
        fileAF.seek((long)pos);
        byte[] bytesToRead = new byte[size];
        fileAF.read(bytesToRead);
        fileAF.close();
        return bytesToRead;
    }

    private static void writeToFile(File filepath, String data, int lineToWriteData, int charsPerLine) throws IOException {
        int bytesPerLine = charsPerLine + 2;

        try {
            RandomAccessFile fileAF = new RandomAccessFile(filepath, "rw");
            long whereToWrite;
            if (lineToWriteData == -1) {
                whereToWrite = fileAF.length();
            } else {
                whereToWrite = (long)(bytesPerLine * lineToWriteData);
            }

            fileAF.seek(whereToWrite);
            fileAF.write(data.getBytes());
            fileAF.writeBytes(System.getProperty("line.separator"));
            System.out.println("In the end");
            fileAF.close();
        } catch (Exception var8) {
            System.out.println("Error dude!");
        }

    }

    private String getChoice(ChoiceBox<String> prv) {
        String province = (String)prv.getValue();
        return province;
    }

    private static void addAddress(String field1, String field2, String field3, String field4, String field5) {
        String data = field1 + " " + field2 + " " + field3 + " " + field4 + " " + field5;
        System.out.println(data);

        try {
            writeToFile(FILE, data, -1, 40);
            System.out.print("In here");
        } catch (IOException var7) {
            var7.printStackTrace();
        }

    }

    private String[] readFirstRecord() {
        try {
            String filePath = "address.txt";
            records[0] = new String(readFromFile(new File(filePath), 0, 4));
            records[1] = new String(readFromFile(new File(filePath), 5, 5));
            records[2] = new String(readFromFile(new File(filePath), 11, 11));
            records[3] = new String(readFromFile(new File(filePath), 23, 7));
            records[4] = new String(readFromFile(new File(filePath), 31, 7));
        } catch (IOException var2) {
            var2.printStackTrace();
        }

        return records;
    }

    private String[] readNextLine() {
        try {
            RandomAccessFile file = new RandomAccessFile(FILE, "r");
            file.seek(39L);
            String line;
            if ((line = file.readLine()) != null) {
                System.out.println(line);
                String filePath = "address.txt";
                records[0] = new String(readFromFile(new File(filePath), 39, 6));
                records[1] = new String(readFromFile(new File(filePath), 46, 8));
                records[2] = new String(readFromFile(new File(filePath), 55, 7));
                records[3] = new String(readFromFile(new File(filePath), 63, 7));
                records[4] = new String(readFromFile(new File(filePath), 71, 7));
            }
        } catch (FileNotFoundException var4) {
            var4.printStackTrace();
        } catch (IOException var5) {
            var5.printStackTrace();
        }

        return records;
    }

    private String[] readPreviousRecord() {
        try {
            RandomAccessFile file = new RandomAccessFile(FILE, "r");
            file.seek(0L);
            String line;
            if ((line = file.readLine()) != null) {
                System.out.println(line);
                String filePath = "address.txt";
                records[0] = new String(readFromFile(new File(filePath), 0, 4));
                records[1] = new String(readFromFile(new File(filePath), 5, 5));
                records[2] = new String(readFromFile(new File(filePath), 11, 11));
                records[3] = new String(readFromFile(new File(filePath), 23, 7));
                records[4] = new String(readFromFile(new File(filePath), 31, 7));
            }
        } catch (FileNotFoundException var4) {
            var4.printStackTrace();
        } catch (IOException var5) {
            var5.printStackTrace();
        }

        return records;
    }

    private String[] readLastRecord() {
        try {
            String filePath = "address.txt";
            records[0] = new String(readFromFile(new File(filePath), 190, 6));
            records[1] = new String(readFromFile(new File(filePath), 197, 7));
            records[2] = new String(readFromFile(new File(filePath), 205, 12));
            records[3] = new String(readFromFile(new File(filePath), 218, 11));
            records[4] = new String(readFromFile(new File(filePath), 230, 7));
        } catch (IOException var2) {
            var2.printStackTrace();
        }

        return records;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
